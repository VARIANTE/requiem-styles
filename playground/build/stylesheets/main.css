/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"], input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

/*! requiem-styles, (c) VARIANTE (http://variante.io) */
html, body, article, aside, details, dialog, summary, footer, header, main, figcaption, figure, hgroup, nav, section, div, table, tr, td, th, tbody, thead, tfoot, col, a[type='button'], input[type='submit'], input[type='button'], input[type='checkbox'], button, p, li, em, strong, label, span, h1, h2, h3, h4, h5, h6, ul, ol, input[type='text'], input[type='password'], input[type='number'], input[type='date'], input[type='month'], input[type='week'], input[type='time'], input[type='datetime'], input[type='datetime-local'], input[type='email'], input[type='search'], input[type='tel'], input[type='url'], textarea, form {
  margin: 0;
  padding: 0;
  border: none;
  box-sizing: border-box;
  outline: none;
}

article, aside, details, dialog, summary, footer, header, main, figcaption, figure, hgroup, nav, section, div, table, tr, td, th, tbody, thead, tfoot, col, a[type='button'], input[type='submit'], input[type='button'], input[type='checkbox'], button, p, li, em, strong, label, span, h1, h2, h3, h4, h5, h6, ul, ol, input[type='text'], input[type='password'], input[type='number'], input[type='date'], input[type='month'], input[type='week'], input[type='time'], input[type='datetime'], input[type='datetime-local'], input[type='email'], input[type='search'], input[type='tel'], input[type='url'], textarea, form {
  font-weight: normal;
  text-decoration: none;
  line-height: normal;
  text-rendering: optimizeLegibility;
  -webkit-text-size-adjust: 100%;
      -ms-text-size-adjust: 100%;
          text-size-adjust: 100%;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  -webkit-tap-highlight-color: transparent;
  -webkit-text-stroke: 0;
}

html {
  font-size: 16px;
  height: 100%;
  width: 100%;
}

body {
  font-size: 100%;
  height: 100%;
  width: 100%;
}

article {
  display: block;
  position: relative;
}

aside {
  display: block;
  position: relative;
}

details {
  display: block;
  position: relative;
}

dialog {
  display: block;
  position: relative;
}

summary {
  display: block;
  position: relative;
}

footer {
  display: block;
  position: relative;
}

header {
  display: block;
  position: relative;
}

main {
  display: block;
  position: relative;
}

figcaption {
  display: block;
  position: relative;
}

figure {
  display: block;
  position: relative;
}

hgroup {
  display: block;
  position: relative;
}

nav {
  display: block;
  position: relative;
}

section {
  display: block;
  position: relative;
}

div {
  display: block;
  position: relative;
}

table {
  display: block;
  position: relative;
}

tr {
  display: block;
  position: relative;
}

td {
  display: block;
  position: relative;
}

th {
  display: block;
  position: relative;
}

tbody {
  display: block;
  position: relative;
}

thead {
  display: block;
  position: relative;
}

tfoot {
  display: block;
  position: relative;
}

col {
  display: block;
  position: relative;
}

a[type='button'] {
  cursor: pointer;
}

a[type='button']:disabled {
  cursor: default;
}

input[type='submit'] {
  cursor: pointer;
}

input[type='submit']:disabled {
  cursor: default;
}

input[type='button'] {
  cursor: pointer;
}

input[type='button']:disabled {
  cursor: default;
}

input[type='checkbox'] {
  cursor: pointer;
}

input[type='checkbox']:disabled {
  cursor: default;
}

button {
  cursor: pointer;
}

button:disabled {
  cursor: default;
}

input[type='text'] {
  resize: none;
}

input[type='text']:focus,
input[type='text']:invalid {
  box-shadow: none;
  outline-width: 0;
}

input[type='text']:-webkit-autofill {
  box-shadow: 0 0 0 1000px white inset;
}

input[type='password'] {
  resize: none;
}

input[type='password']:focus,
input[type='password']:invalid {
  box-shadow: none;
  outline-width: 0;
}

input[type='password']:-webkit-autofill {
  box-shadow: 0 0 0 1000px white inset;
}

input[type='number'] {
  resize: none;
}

input[type='number']:focus,
input[type='number']:invalid {
  box-shadow: none;
  outline-width: 0;
}

input[type='number']:-webkit-autofill {
  box-shadow: 0 0 0 1000px white inset;
}

input[type='date'] {
  resize: none;
}

input[type='date']:focus,
input[type='date']:invalid {
  box-shadow: none;
  outline-width: 0;
}

input[type='date']:-webkit-autofill {
  box-shadow: 0 0 0 1000px white inset;
}

input[type='month'] {
  resize: none;
}

input[type='month']:focus,
input[type='month']:invalid {
  box-shadow: none;
  outline-width: 0;
}

input[type='month']:-webkit-autofill {
  box-shadow: 0 0 0 1000px white inset;
}

input[type='week'] {
  resize: none;
}

input[type='week']:focus,
input[type='week']:invalid {
  box-shadow: none;
  outline-width: 0;
}

input[type='week']:-webkit-autofill {
  box-shadow: 0 0 0 1000px white inset;
}

input[type='time'] {
  resize: none;
}

input[type='time']:focus,
input[type='time']:invalid {
  box-shadow: none;
  outline-width: 0;
}

input[type='time']:-webkit-autofill {
  box-shadow: 0 0 0 1000px white inset;
}

input[type='datetime'] {
  resize: none;
}

input[type='datetime']:focus,
input[type='datetime']:invalid {
  box-shadow: none;
  outline-width: 0;
}

input[type='datetime']:-webkit-autofill {
  box-shadow: 0 0 0 1000px white inset;
}

input[type='datetime-local'] {
  resize: none;
}

input[type='datetime-local']:focus,
input[type='datetime-local']:invalid {
  box-shadow: none;
  outline-width: 0;
}

input[type='datetime-local']:-webkit-autofill {
  box-shadow: 0 0 0 1000px white inset;
}

input[type='email'] {
  resize: none;
}

input[type='email']:focus,
input[type='email']:invalid {
  box-shadow: none;
  outline-width: 0;
}

input[type='email']:-webkit-autofill {
  box-shadow: 0 0 0 1000px white inset;
}

input[type='search'] {
  resize: none;
}

input[type='search']:focus,
input[type='search']:invalid {
  box-shadow: none;
  outline-width: 0;
}

input[type='search']:-webkit-autofill {
  box-shadow: 0 0 0 1000px white inset;
}

input[type='tel'] {
  resize: none;
}

input[type='tel']:focus,
input[type='tel']:invalid {
  box-shadow: none;
  outline-width: 0;
}

input[type='tel']:-webkit-autofill {
  box-shadow: 0 0 0 1000px white inset;
}

input[type='url'] {
  resize: none;
}

input[type='url']:focus,
input[type='url']:invalid {
  box-shadow: none;
  outline-width: 0;
}

input[type='url']:-webkit-autofill {
  box-shadow: 0 0 0 1000px white inset;
}

textarea {
  resize: none;
}

textarea:focus,
textarea:invalid {
  box-shadow: none;
  outline-width: 0;
}

textarea:-webkit-autofill {
  box-shadow: 0 0 0 1000px white inset;
}

form {
  position: static;
}

[data-r-controller="Playground"] {
  width: 100%;
  height: 100%;
}

[data-r-controller="Playground"][r-foo='bar'] {
  background-color: #ff0;
}

[data-r-controller="Playground"][data-r-foo='bar'] {
  background-color: #ff0;
}

[data-r-controller="Playground"] .foo {
  line-height: normal;
  white-space: normal;
  -webkit-flex-wrap: nowrap;
      -ms-flex-wrap: nowrap;
          flex-wrap: nowrap;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -webkit-flex-direction: row;
      -ms-flex-direction: row;
          flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100px;
  height: 30px;
  background-color: #000;
  color: #fff;
}

[r-controller="Playground"] {
  width: 100%;
  height: 100%;
}

[r-controller="Playground"][r-foo='bar'] {
  background-color: #ff0;
}

[r-controller="Playground"][data-r-foo='bar'] {
  background-color: #ff0;
}

[r-controller="Playground"] .foo {
  line-height: normal;
  white-space: normal;
  -webkit-flex-wrap: nowrap;
      -ms-flex-wrap: nowrap;
          flex-wrap: nowrap;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -webkit-flex-direction: row;
      -ms-flex-direction: row;
          flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100px;
  height: 30px;
  background-color: #000;
  color: #fff;
}

/*# sourceMappingURL=data:application/json;base64, */
