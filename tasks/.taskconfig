/**
 * Requiem-Styles
 * (c) VARIANTE (http://variante.io)
 *
 * Configuration for Gulp tasks.
 *
 * This software is released under the MIT License:
 * http://www.opensource.org/licenses/mit-license.php
 */

var path = require('path');
var $util = require('gulp-util');

var env = {
  clean: $util.env['clean'] || $util.env['c'],
  port: $util.env['port'] || $util.env['p'],
  serve: $util.env['serve'] || $util.env['s'],
  watch: $util.env['watch'] || $util.env['w']
};

var paths = {
  src: path.join(__dirname, '../', 'src'),
  dist: path.join(__dirname, '../', 'dist'),
  play: path.join(__dirname, '../', 'playground'),
  modules: path.join(__dirname, '../', 'node_modules')
};

var tasks = {
  clean: {
    input: paths.dist
  },
  build: {
    css: {
      pretty: {
        input: path.join(paths.src, 'sass', 'requiem.scss'),
        output: path.join(paths.dist, 'css'),
        sass: {
          outputStyle: 'expanded',
          includePaths: [path.join(paths.dist, 'sass')]
        },
        less: {
          paths: [path.join(paths.dist, 'less')]
        },
        stylus: {
          'include css': true,
          include: [path.join(paths.dist, 'stylus')]
        }
      },
      ugly: {
        input: path.join(paths.src, 'sass', 'requiem.scss'),
        outputFile: 'requiem.min.css',
        output: path.join(paths.dist, 'css'),
        sass: {
          outputStyle: 'expanded',
          includePaths: [path.join(paths.dist, 'sass')]
        },
        less: {
          paths: [path.join(paths.dist, 'less')]
        },
        stylus: {
          'include css': true,
          include: [path.join(paths.dist, 'stylus')]
        }
      }
    },
    sass: {
      input: path.join(paths.src, '**', '*.{scss,sass}'),
      output: path.join(paths.dist)
    },
    less: {
      input: path.join(paths.src, 'less', '**', '*.less'),
      output: path.join(paths.dist, 'less')
    },
    stylus: {
      input: path.join(paths.src, 'stylus', '**', '*.styl'),
      output: path.join(paths.dist, 'stylus')
    },
    autoprefixer: {
      browsers: ['last 2 version', 'ie 9']
    }
  },
  play: {
    clean: {
      input: path.join(paths.play, 'build')
    },
    styles: {
      css: {
        input: path.join(paths.play, 'src', 'stylesheets', 'css', '*.css'),
        output: path.join(paths.play, 'build', 'stylesheets')
      },
      sass: {
        input: path.join(paths.play, 'src', 'stylesheets', 'sass', '*.{scss,sass}'),
        output: path.join(paths.play, 'build', 'stylesheets'),
        options: {
          outputStyle: 'expanded',
          includePaths: [path.join(paths.dist, 'sass')]
        }
      },
      less: {
        input: path.join(paths.play, 'src', 'stylesheets', 'less', '*.less'),
        output: path.join(paths.play, 'build', 'stylesheets'),
        options: {
          paths: [path.join(paths.dist, 'less')]
        }
      },
      stylus: {
        input: path.join(paths.play, 'src', 'stylesheets', 'stylus', '*.styl'),
        output: path.join(paths.play, 'build', 'stylesheets'),
        options: {
          'include css': true,
          include: [path.join(paths.dist, 'stylus')]
        }
      }
    },
    scripts: {
      webpack: {
        cache: true,
        context: path.join(paths.play, 'src', 'javascripts'),
        debug: true,
        devtool: 'sourcemap',
        entry: {
          main: './main.js'
        },
        output: {
          path: path.join(paths.play, 'build', 'javascripts'),
          publicPath: 'javascripts/',
          filename: '[name].js',
          chunkFilename: '[chunkhash].js',
          sourceMapFilename: '[file].map'
        },
        module: {
          loaders: [{
            test: path.join(paths.play, 'src', 'javascripts'),
            loader: 'babel-loader'
          }]
        },
        resolve: {
          root: [path.join(paths.dist, 'js')],
          extensions: ['', '.js', '.json']
        }
      }
    },
    templates: {
      input: path.join(paths.play, 'src', 'templates', 'views', '**', '*.jade'),
      output: path.join(paths.play, 'build'),
      jade: {
        pretty: true
      }
    },
    serve: {
      browserSync: {
        server: {
          baseDir: path.join(paths.play, 'build')
        },
        files: [path.join(paths.play, 'build')],
        browser: 'google chrome',
        notify: false,
        port: (typeof port === 'number') ? env.port : 9000
      }
    }
  },
  watch: {
    build: [{
        files: path.join(paths.src, '**', '*.{scss,sass}'),
        tasks: [
          'build:css',
          'build:sass'
        ]
      }, {
        files: path.join(paths.src, '**', '*.less'),
        tasks: [
          'build:less'
        ]
      }, {
        files: path.join(paths.src, '**', '*.styl'),
        tasks: [
          'build:stylus'
        ]
      }
    ],
    play: [{
      files: [
        path.join(paths.play, 'src', '**', '*.css'),
        path.join(paths.dist, '**', '*.css')
      ],
      tasks: ['styles:css:play']
    }, {
      files: [
        path.join(paths.play, 'src', '**', '*.scss'),
        path.join(paths.dist, '**', '*.scss')
      ],
      tasks: ['styles:sass:play']
    }, {
      files: [
        path.join(paths.play, 'src', '**', '*.less'),
        path.join(paths.dist, '**', '*.less')
      ],
      tasks: ['styles:less:play']
    }, {
      files: [
        path.join(paths.play, 'src', '**', '*.styl'),
        path.join(paths.dist, '**', '*.styl')
      ],
      tasks: ['styles:stylus:play']
    }, {
      files: path.join(paths.play, 'src', '**', '*.jade'),
      tasks: ['templates:play']
    }]
  }
};

module.exports = {
  env: env,
  paths: paths,
  tasks: tasks
};
