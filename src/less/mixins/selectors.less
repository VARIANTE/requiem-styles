//
// Requiem-Styles
// (c) VARIANTE (http://variante.io)
//
// This software is released under the MIT License:
// http://www.opensource.org/licenses/mit-license.php
//

//
// Selector for label elements. Each element is meant to contain text only. For
// optimal results, do not nest label elements. For italics, use <i>, and for
// bold, use <b>. <a> is not treated as a label element and should only be used
// to make a nested element a hyperlink.
//
// @param {string} [@type='all'] - Type of the label (i.e. 'body', 'header',
//                                 'all')
//
.labels(@type:'all', @rules) {
  & when (@type = 'all'), (@type = 'body') {
    p                  { @rules(); }
    em                 { @rules(); }
    strong             { @rules(); }
    label              { @rules(); }
    a[type='label']    { @rules(); }
    li[type='label']   { @rules(); }
    span[type='label'] { @rules(); }
  }

  & when (@type = 'all'), (@type = 'header') {
    h1 { @rules(); }
    h2 { @rules(); }
    h3 { @rules(); }
    h4 { @rules(); }
    h5 { @rules(); }
    h6 { @rules(); }
  }
}

//
// Selects labels with the given instance name.
//
// @param {string} @instance - Instance name.
//
.label(@instance:'', @rules) {
  .labels(@rules: {
    &[data-instance='@{instance}'] when not (@instance = '') {
      @rules();
    }
  });
}

//
// Selects labels with the given class(es).
//
// @param {string} @class - Class(es).
//
.label-class(@class:'', @rules) {
  @e: e(@class);

  .labels(@rules: {
    &.@{e} when not (@class = '') {
      @rules();
    }
  });
}

//
// Selects labels with the given ID.
//
// @param {string} @id - ID.
//
.label-id(@id:'', @rules) {
  @e: e(@id);

  .labels(@rules: {
    &#@{e} when not (@id = '') {
      @rules();
    }
  });
}

//
// Selector for static elements.
//
.statics(@rules) {
  form { @rules(); }
}

//
// Selects statics with the given instance name.
//
// @param {string} @instance - Instance name.
//
.static(@instance:'', @rules) {
  .statics(@rules: {
    &[data-instance='@{instance}'] when not (@instance = '') {
      @rules();
    }
  });
}

//
// Selects statics with the given class(es).
//
// @param {string} @class - Class(es).
//
.static-class(@class:'', @rules) {
  @e: e(@class);

  .statics(@rules: {
    &.@{e} when not (@class = '') {
      @rules();
    }
  });
}

//
// Selects statics with the given ID.
//
// @param {string} @id - ID.
//
.static-id(@id:'', @rules) {
  @e: e(@id);

  .statics(@rules: {
    &#@{e} when not (@id = '') {
      @rules();
    }
  });
}

//
// Selector for button elements.
//
.buttons(@rules) {
  a[type='button']       { @rules(); }
  input[type='submit']   { @rules(); }
  input[type='button']   { @rules(); }
  input[type='checkbox'] { @rules(); }
  input[type='file']     { @rules(); }
  button                 { @rules(); }
}

//
// Selects buttons with the given instance name.
//
// @param {string} @instance - Instance name.
//
.button(@instance:'', @rules) {
  .buttons(@rules: {
    &[data-instance='@{instance}'] when not (@instance = '') {
      @rules();
    }
  });
}

//
// Selects buttons with the given class(es).
//
// @param {string} @class - Class(es).
//
.button-class(@class:'', @rules) {
  @e: e(@class);

  .buttons(@rules: {
    &.@{e} when not (@class = '') {
      @rules();
    }
  });
}

//
// Selects buttons with the given ID.
//
// @param {string} @id - ID.
//
.button-id(@id:'', @rules) {
  @e: e(@id);

  .buttons(@rules: {
    &#@{e} when not (@id = '') {
      @rules();
    }
  });
}

//
// Selector for hyperlinks.
//
.links(@rules) {
  a:not([type='button']):not([type='label']) { @rules(); }
}

//
// Selects links with the given instance name.
//
// @param {string} @instance - Instance name.
//
.link(@instance:'', @rules) {
  .links(@rules: {
    &[data-instance='@{instance}'] when not (@instance = '') {
      @rules();
    }
  });
}

//
// Selects links with the given class(es).
//
// @param {string} @class - Class(es).
//
.link-class(@class:'', @rules) {
  @e: e(@class);

  .links(@rules: {
    &.@{e} when not (@class = '') {
      @rules();
    }
  });
}

//
// Selects links with the given ID.
//
// @param {string} @id - ID.
//
.link-id(@id:'', @rules) {
  @e: e(@id);

  .links(@rules: {
    &#@{e} when not (@id = '') {
      @rules();
    }
  });
}

//
// Selector for textfield input elements.
//
.textfields(@rules) {
  input[type='text']           { @rules(); }
  input[type='password']       { @rules(); }
  input[type='number']         { @rules(); }
  input[type='date']           { @rules(); }
  input[type='month']          { @rules(); }
  input[type='week']           { @rules(); }
  input[type='time']           { @rules(); }
  input[type='datetime']       { @rules(); }
  input[type='datetime-local'] { @rules(); }
  input[type='email']          { @rules(); }
  input[type='search']         { @rules(); }
  input[type='tel']            { @rules(); }
  input[type='url']            { @rules(); }
  textarea                     { @rules(); }
}

//
// Selects textfields with the given instance name.
//
// @param {string} @instance - Instance name.
//
.textfield(@instance:'', @rules) {
  .textfields(@rules: {
    &[data-instance='@{instance}'] when not (@instance = '') {
      @rules();
    }
  });
}

//
// Selects textfields with the given class(es).
//
// @param {string} @class - Class(es).
//
.textfield-class(@class:'', @rules) {
  @e: e(@class);

  .textfields(@rules: {
    &.@{e} when not (@class = '') {
      @rules();
    }
  });
}

//
// Selects textfields with the given ID.
//
// @param {string} @id - ID.
//
.textfield-id(@id:'', @rules) {
  @e: e(@id);

  .textfields(@rules: {
    &#@{e} when not (@id = '') {
      @rules();
    }
  });
}

//
// Selector for box elements.
//
.boxes(@rules) {
  article    { @rules(); }
  aside      { @rules(); }
  details    { @rules(); }
  dialog     { @rules(); }
  summary    { @rules(); }
  footer     { @rules(); }
  header     { @rules(); }
  main       { @rules(); }
  figcaption { @rules(); }
  figure     { @rules(); }
  hgroup     { @rules(); }
  nav        { @rules(); }
  section    { @rules(); }
  div        { @rules(); }
  table      { @rules(); }
  tr         { @rules(); }
  td         { @rules(); }
  th         { @rules(); }
  tbody      { @rules(); }
  thead      { @rules(); }
  tfoot      { @rules(); }
  col        { @rules(); }
}

//
// Selects boxes with the given instance name.
//
// @param {string} @instance - Instance name.
//
.box(@instance:'', @rules) {
  .boxes(@rules: {
    &[data-instance='@{instance}'] when not (@instance = '') {
      @rules();
    }
  });
}

//
// Selects boxes with the given class(es).
//
// @param {string} @class - Class(es).
//
.box-class(@class:'', @rules) {
  @e: e(@class);

  .boxes(@rules: {
    &.@{e} when not (@class = '') {
      @rules();
    }
  });
}

//
// Selects boxes with the given ID.
//
// @param {string} @id - ID.
//
.box-id(@id:'', @rules) {
  @e: e(@id);

  .boxes(@rules: {
    &#@{e} when not (@id = '') {
      @rules();
    }
  });
}

//
// Selector for list elements.
//
.lists(@rules) {
  ul { @rules(); }
  ol { @rules(); }
}

//
// Selects lists with the given instance name.
//
// @param {string} @instance - Instance name.
//
.list(@instance:'', @rules) {
  .lists(@rules: {
    &[data-instance='@{instance}'] when not (@instance = '') {
      @rules();
    }
  });
}

//
// Selects lists with the given class(es).
//
// @param {string} @class - Class(es).
//
.list-class(@class:'', @rules) {
  @e: e(@class);

  .lists(@rules: {
    &.@{e} when not (@class = '') {
      @rules();
    }
  });
}

//
// Selects lists with the given ID.
//
// @param {string} @id - ID.
//
.list-id(@id:'', @rules) {
  @e: e(@id);

  .lists(@rules: {
    &#@{e} when not (@id = '') {
      @rules();
    }
  });
}

//
// Selector for list item elements.
//
.list-items(@rules) {
  li:not([type='label']) { @rules(); }
}

//
// Selects list items with the given instance name.
//
// @param {string} @instance - Instance name.
//
.list-item(@instance:'', @rules) {
  .list-items(@rules: {
    &[data-instance='@{instance}'] when not (@instance = '') {
      @rules();
    }
  });
}

//
// Selects list items with the given class(es).
//
// @param {string} @class - Class(es).
//
.list-item-class(@class:'', @rules) {
  @e: e(@class);

  .list-items(@rules: {
    &.@{e} when not (@class = '') {
      @rules();
    }
  });
}

//
// Selects list items with the given ID.
//
// @param {string} @id - ID.
//
.list-item-id(@id:'', @rules) {
  @e: e(@id);

  .list-items(@rules: {
    &#@{e} when not (@id = '') {
      @rules();
    }
  });
}
