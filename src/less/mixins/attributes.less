// (c) Andrew Wei

/// Selector for elements with the data-class attribute.
///
/// @param {string} @name - data-class attribute value.
///
/// @group attributes
.class(@name, @rules) {
  [data-class='@{name}'] { @rules(); }
}

/// Selector for elements with the data-instance attribute.
///
/// @param {string} @name - data-instance attribute value.
///
/// @group attributes
.instance(@name, @rules) {
  [data-instance='@{name}'] { @rules(); }
}

/// Selects elements with the specified data- key and value.
///
/// @param {string} @key            - data- key.
/// @param {string} @value [null]   - data- value, if applicable.
/// @param {string} @scope ['this'] - Specifies the scope relative to the target
///                                   selector in which this property applies to
///                                   (any, this, parent, or child).
///
/// @group attributes
.property(@key, @value:~'', @scope:'this', @rules) {
  @attr: ~'data-@{key}';

  & when (@value = '') {
    & when (@scope = 'any') {
      :root [@{attr}] { @rules(); }
    }

    & when (@scope = 'this') {
      &[@{attr}] { @rules(); }
    }

    & when (@scope = 'parent') {
      [@{attr}] & { @rules(); }
    }

    & when (@scope = 'child') {
      &[@{attr}] * { @rules(); }
    }
  }

  & when not (@value = '') {
    & when (@scope = 'any') {
      :root [@{attr}='@{value}'] { @rules(); }
    }

    & when (@scope = 'this') {
      &[@{attr}='@{value}'] { @rules(); }
    }

    & when (@scope = 'parent') {
      [@{attr}='@{value}'] & { @rules(); }
    }

    & when (@scope = 'child') {
      &[@{attr}='@{value}'] * { @rules(); }
    }
  }
}

/// Binds the content to one/multiple data-state of the target selector. Option to
/// specify whether the state(s) are default.
///
/// @param {List}    @states          - List of state names.
/// @param {boolean} @default [false] - Specifies whether the class(es) are
///                                     default.
///
/// @group attributes
.state(@states, @default:false, @rules) {
  @attr: ~'data-state';

  .loop(@i) when (@i > 0) {
    @state: extract(@states, @i);

    & when (@state = 'hover') {
      & when (@modernizr-enabled = true) {
        .no-touch &:hover            { @rules(); }
        .no-touch &[@{attr}='hover'] { @rules(); }
      }

      & when not (@modernizr-enabled = true) {
        &:hover            { @rules(); }
        &[@{attr}='hover'] { @rules(); }
      }
    }

    & when not (@state = 'hover') {
      &[@{attr}='@{state}'] { @rules(); }
    }

    .loop((@i - 1));
  }

  .loop(length(@states));

  & when (@default = true) {
    @rules();
  }
}
