// (c) Andrew Wei

// Device size thresholds.
$device-thresholds = {
  mobile: {
    min: 0px,
    max: 599px
  },
  phablet: {
    min: 600px,
    max: 767px
  },
  tablet: {
    min: 768px,
    max: 1024px
  },
  desktop: {
    min: 1025px,
    max: 100000px
  }
}

/// Media query mixin that translates a set of descriptors into rules that apply
/// bounding restrictions to screens. This mixin supports 4 predefined screen
/// types: 'mobile', 'phablet', 'tablet' and 'desktop' and 2 predefined screen
/// orientations: 'portrait' and 'landscape'.
///
/// @param {List} $descriptors   - List of strings formatted by either
///                                '{base}{relational_operator}{%s_or_screen_type}'
///                                or '{orientation}'. If no {base} is specified,
///                                width will be used. {%s} is also optional.
/// @param {List} $params [null] - List of values applied in the same order as
///                                the descriptors for string replacement
///                                whenever '%s' is used.
///
/// @example
///   @include screen('w<%s', 200px) { ... } // or
///   @include screen('<%s', 200px) { ... }  // or
///   @include screen('<', 200px) { ... }
///
///   // @media screen and (max-width: 199px) { ... }
///
/// @example
///   @include screen('h>=phablet') { ... }
///
///   // @media screen and (min-width: 767px) { ... }
///
/// @example
///   @include screen('w=tablet') { ... }
///
///   // @media screen and (min-width: 768px) and (max-width: 1024px) { ... }
///
/// @example
///   @include screen('w>=%s' 'w<%s' 'h>', 200px 400px 150px) { ... }
///
///   // @media screen and (min-width: 200px) and (max-width: 399px) and (min-height: 151px) { ... }
///
/// @group media
screen($descriptors, $params=null)
  $_bases = {
    '': width,
    'w': width,
    'width': width,
    'h': height,
    'height': height
  }

  $_queries = ()

  for $descriptor in $descriptors
    $_base = null
    $_rule = null
    $_min = null
    $_max = null
    $_orientation = null

    if length(split('<=', $descriptor)) > 1
      $_l = split('<=', $descriptor)
      $_base = $_bases[$_l[0]]
      $_rule = $_l[1]
      $_min = null;
      $_max = ($_rule in $device-thresholds) ? $device-thresholds[$_rule].max : shift($params)
    else if length(split('<', $descriptor)) > 1
      $_l = split('<', $descriptor)
      $_base = $_bases[$_l[0]]
      $_rule = $_l[1]
      $_min = null;
      $_max = ($_rule in $device-thresholds) ? ($device-thresholds[$_rule].min - 1) : (shift($params) - 1)
    else if length(split('>=', $descriptor)) > 1
      $_l = split('>=', $descriptor)
      $_base = $_bases[$_l[0]]
      $_rule = $_l[1]
      $_min = ($_rule in $device-thresholds) ? $device-thresholds[$_rule].min : shift($params)
      $_max = null;
    else if length(split('>', $descriptor)) > 1
      $_l = split('>', $descriptor)
      $_base = $_bases[$_l[0]]
      $_rule = $_l[1]
      $_min = ($_rule in $device-thresholds) ? ($device-thresholds[$_rule].max + 1) : (shift($params) + 1)
      $_max = null;
    else if length(split('=', $descriptor)) > 1
      $_l = split('=', $descriptor)
      $_base = $_bases[$_l[0]]
      $_rule = $_l[1]
      $_min = ($_rule in $device-thresholds) ? $device-thresholds[$_rule].min : shift($params)
      $_max = ($_rule in $device-thresholds) ? $device-thresholds[$_rule].max : shift($params)
    else if $descriptor == 'portrait'
      $_orientation = 'portrait'
    else if $descriptor == 'landscape'
      $_orientation = 'landscape'

    if $_min != null
      push($_queries, '(min-' + $_base + ': ' + $_min + ')')

    if $_max != null
      push($_queries, '(max-' + $_base + ': ' + $_max + ')')

    if $_orientation != null
      push($_queries, '(orientation: ' + $_orientation + ')')

  $_media = '';

  for $_query in $_queries
    $_media = $_media + ' and ' + $_query

  if $_media != ''
    $_media = unquote('screen' + $_media)

    @media $_media
      {block}

  else
    warn('No valid media queries devised from these descriptors: ' + $descriptors)

/// Sets the background-size and background-position of a target element which is
/// using an image map to the corresponding item in the map.
///
/// @param {string} $path      - Path of sprite map.
/// @param {number} $row-index - 0-based index of the row of the target item.
/// @param {number} $col-index - 0-based index of the column of the target item.
/// @param {number} $num-rows  - Total number of rows in the image map.
/// @param {number} $num-cols  - Total number of columns in the image map.
///
/// @group media
image-map-item($path, $row-index, $col-index, $num-rows, $num-cols)
  if $path != null
    background-image: url($path)

  $x = 0
  $y = 0

  if $num-cols > 1
    $x = (100 / ($num-cols - 1)) * $col-index
  if $num-rows > 1
    $y = (100 / ($num-rows - 1)) * $row-index

  background-size: unit($num-cols * 100, '%') unit($num-rows * 100, '%')
  background-position: unit($x, '%') unit($y, '%')

/// Auto generates a list of class names of the target selector, where each
/// class represents a sprite as provided by the sprite map.
///
/// @param {string} $path       - Path of sprite map.
/// @param {List}   $map [null] - List (1D or 2D) of class names. The position
///                               of each list item directly corresponds to the
///                               sprite position on the sprite map.
///
/// @todo This mixin is quite slow in performance due to the nested loop.
/// @group media
image-map($path=null, $map=null)
  if $path != null
    background-image: url($path)

  if $map != null
    $max-rows = length($map)

    if $max-rows > 0
      if length($map[0]) > 1
        $max-cols = length($map[0])

        for $i in (0..$max-rows)
          $row = $map[$i]

          for $j in (0..length($row))
            $col = $row[$j]
            &.{$col}
              image-map-item(null, $i - 1, $j - 1, $max-rows, $max-cols)
      else
        for $i in (0..$max-rows)
          $col = $map[$i]
          &.{$col}
            image-map-item(null, 0, $i - 1, 1, $max-rows)
