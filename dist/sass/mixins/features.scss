//
// Requiem-Styles
// (c) VARIANTE (http://variante.io)
//
// This software is released under the MIT License:
// http://www.opensource.org/licenses/mit-license.php
//

/// Applies font related rules.
///
/// @param {List}   $family        - Font family.
/// @param {*}      $size [null]   - Font size.
/// @param {number} $weight [null] - Font weight.
///
/// @group features
@mixin font($family, $size:null, $weight:null) {
  font-family: append($family, null, comma);
  @if ($size != null) { font-size: $size; }
  @if ($weight != null) { font-weight: $weight; }
}

/// Binds the content to the target selector based on the 'csstransitions'
/// feature (requires Modernizr).
///
/// @param {boolean} $enabled [true] - Specifies whether 'csstransitions' class
///                                    is required.
///
/// @group features
@mixin transition-detection($enabled:true) {
  @if ($enabled == true) and ($modernizr-enabled == true) {
    .csstransitions & { @content; }
  }
  @else {
    @content;
  }
}

/// Applies transition rules.
///
/// @param {List} $properties [all]        - Transition property(ies).
/// @param {List} $durations [0s]          - Transition duration(s).
/// @param {List} $timing-functions [ease] - Transition timing function(s).
/// @param {List} $delays [0s]             - Transition delay(s).
///
/// @group features
@mixin transition($properties:all, $durations:0s, $timing-functions:ease, $delays:0s) {
  transition-property: append($properties, null, comma);
  transition-duration: append($durations, null, comma);
  transition-timing-function: append($timing-functions, null, comma);
  transition-delay: append($delays, null, comma);
}

/// Binds the content to the target selector based on the 'cssanimations' feature
/// (requires Modernizr).
///
/// @param {boolean} $enabled [true] - Specifies whether 'cssanimations' class
///                                    is required.
///
/// @group features
@mixin animation-detection($enabled:true) {
  @if ($enabled == true) and ($modernizr-enabled == true) {
    .cssanimations & { @content; }
  }
  @else {
    @content;
  }
}

/// Binds the content to the target selector based on the 'touch' and 'no-touch'
/// feature (requires Modernizr).
///
/// @param {boolean} $enabled [true]    - Specifies whether 'touch' class is
///                                       required.
/// @param {boolean} $exclusive [false] - Specifies whether 'no-touch' class is
///                                       required if $enabled is false.
///
/// @group features
@mixin touch($enabled:true, $exclusive:false) {
  @if $enabled == true and $modernizr-enabled == true {
    .touch & { @content; }
  }
  @else {
    @if $exclusive == true and $modernizr-enabled == true {
      .no-touch & { @content; }
    }
    @else {
      @content;
    }
  }
}

/// Enables hardware acceleration for containing selector.
///
/// @group features
@mixin hardware-acceleration() {
  transform: translate3d(0px, 0px, 0px);
}

/// Enables/disables pointer events for target selector and all child selectors.
///
/// @param {boolean} $enabled [true]   - Specifies whether element should have
///                                      pointer events enabled.
/// @param {boolean} $recursive [true] - Specifies whether child elements should
///                                      also be applied.
/// @param {boolean} $forced [true]    - Specifies whether the behavior is
///                                      tagged '!important'.
///
/// @group features
@mixin pointable($enabled:true, $recursive:true, $forced:true) {
  @if ($enabled == true) {
    @if ($recursive == true) {
      @if ($forced == true) {
        &, * { pointer-events: initial !important; }
      }
      @else {
        &, * { pointer-events: initial; }
      }
    }
    @else {
      @if ($forced == true) {
        & { pointer-events: initial !important; }
      }
      @else {
        & { pointer-events: initial; }
      }
    }
  }
  @else {
    @if ($recursive == true) {
      @if ($forced == true) {
        &, * { pointer-events: none !important; }
      }
      @else {
        &, * { pointer-events: none; }
      }
    }
    @else {
      @if ($forced == true) {
        & { pointer-events: none !important; }
      }
      @else {
        & { pointer-events: none; }
      }
    }
  }
}
