//
// Requiem-Styles
// (c) VARIANTE (http://variante.io)
//
// This software is released under the MIT License:
// http://www.opensource.org/licenses/mit-license.php
//

/// Media query for screens in portrait orientation.
///
/// @group media
@mixin screen-portrait { @media only screen and (orientation: portrait) { @content; } }

/// Media query for screens in landscape orientation.
///
/// @group media
@mixin screen-landscape { @media only screen and (orientation: landscape) { @content; } }

/// Media query for screens at a specified minimum width.
///
/// @param {number} $minWidth
///
/// @group media
@mixin screen-min-width($minWidth) { @media only screen and (min-width: #{$minWidth}px) { @content; } }

/// Media query for screens at a specified maximum width.
///
/// @param {number} $maxWidth
///
/// @group media
@mixin screen-max-width($maxWidth) { @media only screen and (max-width: #{$maxWidth}px) { @content; } }

/// Media query for screens at a specified minimum height.
///
/// @param {number} $minHeight
///
/// @group media
@mixin screen-min-height($minHeight) { @media only screen and (min-height: #{$minHeight}px) { @content; } }

/// Media query for screens at a specified maximum height.
///
/// @param {number} $maxHeight
///
/// @group media
@mixin screen-max-height($maxHeight) { @media only screen and (max-height: #{$maxHeight}px) { @content; } }

/// Media query for the minimum width/height threshold of the specified screen
/// type.
///
/// @param {string}  $screen              - Screen type (supports 'mobile',
///                                         'phablet', 'tablet', or 'desktop').
/// @param {boolean} $exclusive [false]   - Specifies whether the media queries
///                                         should be exclusive to this screen
///                                         type. If false, the generated media
///                                         query will use the minimum threshold
///                                         of the selected screen type, meaning
///                                         that bigger screen types will apply.
///                                         If true, the generated media query
///                                         will be bounded by the minimum and
///                                         the maximum thresholds, inclusive.
/// @param {boolean} $invert [false]      - Inverts the generated media query.
/// @param {string}  $measurement [width] - Specifies width or height
///                                         measurement to be used for the media
///                                         queries.
/// @param {boolean} $touch [false]       - Specifues whether the condition is
///                                         only valid for touch devices
///                                         (requires Modernizr feature
///                                         detection), namely the '.touch'
///                                         class. If false (default), it does
///                                         NOT use the '.no-touch' class, but
///                                         instead applies content normally.
///
/// @group media
@mixin screen($screen, $exclusive:false, $invert:false, $measurement:width, $touch:false) {
  @if $screen == mobile {
    $min-threshold: 0px;
    $max-threshold: 599px;
  }

  @else if $screen == phablet {
    $min-threshold: 600px;
    $max-threshold: 767px;
  }

  @else if $screen == tablet {
    $min-threshold: 768px;
    $max-threshold: 1024px;
  }

  @else if $screen == desktop {
    $min-threshold: 1025px;
    $max-threshold: 100000px; // some ridiculously large arbituary number
  }

  @if $min-threshold != null and $max-threshold != null {
    @if $exclusive == true {
      @if $invert == true {
        @media screen and (max-#{$measurement}: #{$min-threshold - 1px}) { @include touch($touch, false) { @content; } }
        @media screen and (min-#{$measurement}: #{$max-threshold + 1px}) { @include touch($touch, false) { @content; } }
      }
      @else {
        @media screen and (min-#{$measurement}: #{$min-threshold}) and (max-#{$measurement}: #{$max-threshold}) { @include touch($touch, false) { @content; } }
      }
    }
    @else {
      @if $invert == true {
          @media screen and (max-#{$measurement}: #{$min-threshold - 1px}) { @include touch($touch, false) { @content; } }
      }
      @else {
          @media screen and (min-#{$measurement}: $min-threshold) { @include touch($touch, false) { @content; } }
      }
    }
  }
}

/// Sets the background-size and background-position of a target element which is
/// using an image map to the corresponding item in the map.
///
/// @param {string} $path      - Path of sprite map.
/// @param {number} $row-index - 0-based index of the row of the target item.
/// @param {number} $col-index - 0-based index of the column of the target item.
/// @param {number} $num-rows  - Total number of rows in the image map.
/// @param {number} $num-cols  - Total number of columns in the image map.
///
/// @group media
@mixin image-map-item($path, $row-index, $col-index, $num-rows, $num-cols) {
  @if $path != null {
    background-image: url($path);
  }

  $x: 0;
  $y: 0;

  @if $num-cols > 1 { $x: #{((100 / ($num-cols - 1)) * $col-index)}; }
  @if $num-rows > 1 { $y: #{((100 / ($num-rows - 1)) * $row-index)}; }

  background-size: #{$num-cols * 100}% #{$num-rows * 100}%;
  background-position: #{$x}% #{$y}%;
}

/// Auto generates a list of class names of the target selector, where each
/// class represents a sprite as provided by the sprite map.
///
/// @param {string} $path       - Path of sprite map.
/// @param {List}   $map [null] - List (1D or 2D) of class names. The position
///                               of each list item directly corresponds to the
///                               sprite position on the sprite map.
///
/// @todo This mixin is quite slow in performance due to the nested loop.
/// @group media
@mixin image-map($path:null, $map:null) {
  @if $path != null {
    background-image: url($path);
  }

  @if $map != null {
    $max-rows: length($map);

    @if $max-rows > 0 {
      @if type-of(nth($map, 1)) == list {
        $max-cols: length(nth($map, 1));

        @for $i from 1 through $max-rows {
          $row: nth($map, $i);

          @for $j from 1 through length(nth($map, $i)) {
            $col: nth($row, $j);
            &.#{$col} { @include image-map-item(null, $i - 1, $j - 1, $max-rows, $max-cols); }
          }
        }
      }
      @else {
        @for $i from 1 through $max-rows {
          $col: nth($map, $i);
          &.#{$col} { @include image-map-item(null, 0, $i - 1, 1, $max-rows); }
        }
      }
    }
  }
}
